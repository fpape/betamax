!tape
name: wrong content length tape
interactions:
- recorded: 2011-10-07T08:18:36.583Z
  request:
    method: GET
    uri: http://robfletcher.github.com/betamax
    headers:
      Accept: '*/*'
      Accept-Encoding: gzip,deflate
      Host: robfletcher.github.com
      Proxy-Connection: Keep-Alive
  response:
    status: 200
    headers:
      Age: '672'
      Cache-Control: max-age=86400
      Content-Encoding: gzip
      Content-Length: '6776'
      Content-Type: text/html
      Date: Fri, 07 Oct 2011 08:07:23 GMT
      Expires: Sat, 08 Oct 2011 08:07:23 GMT
      Last-Modified: Thu, 06 Oct 2011 12:59:32 GMT
      Server: nginx/1.0.4
    body: "<!DOCTYPE html>\n<!--[if lt IE 7 ]><html class=\"no-js ie ie6\" lang=\"en\"> <![endif]-->\n<!--[if IE 7 ]><html class=\"no-js ie ie7\" lang=\"en\"> <![endif]-->\n<!--[if IE 8 ]><html class=\"no-js ie ie8\" lang=\"en\"> <![endif]-->\n<!--[if (gte IE\
      \ 9)|!(IE)]><!--><html class=\"no-js\" lang=\"en\"> <!--<![endif]-->\n\t<head>\n\n\t<meta charset=\"utf-8\">\n\t<title>Betamax - Record / playback testing proxy</title>\n\t<meta name=\"description\" content=\"A record and playback HTTP proxy for testing\
      \ applications that connect to HTTP services\">\n\t<meta name=\"keywords\" content=\"testing,http proxy,http stub,http mock,groovy,java,jvm,web services,rest\">\n\t<meta name=\"author\" content=\"Rob Fletcher\">\n\t<script src=\"javascripts/modernizr.js\"\
      ></script>\n\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">\n\n\t<link rel=\"stylesheet\" href=\"http://fonts.googleapis.com/css?family=Play&subset=latin,greek\">\n\t<link rel=\"stylesheet\" href=\"stylesheets/base.css\"\
      >\n\t<link rel=\"stylesheet\" href=\"stylesheets/skeleton.css\">\n\t<link rel=\"stylesheet\" href=\"stylesheets/layout.css\">\n\t<link rel=\"stylesheet\" href=\"stylesheets/prettify.css\">\n\n\t<link rel=\"stylesheet/less\" type=\"text/css\" href=\"stylesheets/betamax.less\"\
      >\n\t<script src=\"javascripts/less.js\" type=\"text/javascript\"></script>\n\n\t<link rel=\"shortcut icon\" href=\"images/favicon.ico\">\n\t<link rel=\"apple-touch-icon\" href=\"images/apple-touch-icon.png\">\n\t<link rel=\"apple-touch-icon\" sizes=\"\
      72x72\" href=\"images/apple-touch-icon-72x72.png\">\n\t<link rel=\"apple-touch-icon\" sizes=\"114x114\" href=\"images/apple-touch-icon-114x114.png\">\n\n\t<link rel=\"author\" href=\"humans.txt\">\n\t</head>\n\t<body>\n\n\t<a href=\"http://github.com/robfletcher/betamax\"\
      >\n\t\t<img alt=\"Fork me on GitHub\" src=\"http://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png\" id=\"forkme\">\n\t</a>\n\n\t<div class=\"container\">\n\n\t\t<header>\n\t\t\t<div id=\"hero-unit\" class=\"sixteen columns\">\n\t\t\t\t\
      <h1>Betamax</h1>\n\t\t\t\t<p>A record / playback proxy for testing JVM applications that connect to external HTTP services.</p>\n\t\t\t</div>\n\t\t\t<div class=\"one-third column teaser\">\n\t\t\t\t<h3>Record</h3>\n\t\t\t\t<p>Just add a <code>@Betamax</code>\
      \ annotation to your test or spec method. The first time it runs HTTP requests &amp; responses are recorded to <em>tape</em>.</p>\n\t\t\t</div>\n\t\t\t<div class=\"one-third column teaser\">\n\t\t\t\t<h3>Playback</h3>\n\t\t\t\t<p>Future test runs play\
      \ HTTP responses back from <em>tape</em>. Insert different <em>tapes</em> to stub different responses.</p>\n\t\t\t</div>\n\t\t\t<div class=\"one-third column teaser\">\n\t\t\t\t<h3>Customize</h3>\n\t\t\t\t<p>Edit your <em>tape</em> files with any text\
      \ editor. Commit them to source control to share with your team and use on your Continuous Integration server.</p>\n\t\t\t</div>\n\t\t</header>\n\n\t\t<div class=\"three columns sidebar\">\n\t\t\t<nav>\n\t\t\t\t<h2 id=\"logo\">Betamax</h2>\n\t\t\t\t<ul>\n\
      \t\t\t\t\t<li><a href=\"#introduction\">Introduction</a></li>\n\t\t\t\t\t<li><a href=\"#versions\">Versions</a></li>\n\t\t\t\t\t<li><a href=\"#installation\">Installation</a></li>\n\t\t\t\t\t<li><a href=\"#usage\">Usage</a></li>\n\t\t\t\t\t<li><a href=\"\
      #caveats\">Caveats</a></li>\n\t\t\t\t\t<li><a href=\"#configuration\">Configuration</a></li>\n\t\t\t\t\t<li><a href=\"#about\">About</a></li>\n\t\t\t\t\t<li><a href=\"#examples\">Examples</a></li>\n\t\t\t\t</ul>\n\t\t\t</nav>\n\t\t\t&nbsp;\n\t\t</div>\n\
      \n\t\t<div class=\"twelve columns content offset-by-one\">\n\n\t\t\t<h2 id='introduction'>Introduction</h2>\n\n<p>Betamax is a record/playback proxy for testing JVM applications that access external HTTP resources such as <a href='http://en.wikipedia.org/wiki/Web_service'>web\
      \ services</a> and <a href='http://en.wikipedia.org/wiki/Representational_state_transfer'>REST</a> APIs. The project was inspired by the <a href='http://relishapp.com/myronmarston/vcr'>VCR</a> library for Ruby.</p>\n\n<p>Testing code that accesses HTTP\
      \ services can be awkward. 3rd party downtime, network availability and resource constraints (such as the Twitter API&#8217;s <a href='https://dev.twitter.com/docs/rate-limiting'>rate limit</a>) can affect the reliability of your tests. You can always\
      \ write custom <em>stub</em> web server code and configure the application to connect to a different URI when running tests but this requires some up front time and may mean reinventing the wheel the next time a similar situation is encountered.</p>\n\n\
      <p>Betamax aims to solve these problems by intercepting HTTP connections initiated by your application and returning <em>recorded</em> responses.</p>\n\n<p>The first time a test annotated with <code>@Betamax</code> is run any HTTP traffic is recorded to\
      \ a <em>tape</em> and subsequent runs will play back the recorded HTTP response from the tape without actually connecting to the external server.</p>\n\n<p>Betamax works with JUnit and <a href='http://spockframework.org/'>Spock</a>. Although it is written\
      \ in <a href='http://groovy.codehaus.org/'>Groovy</a> Betamax can be used to test applications written in any JVM language so long as HTTP connections are made in a way that respects Java&#8217;s <code>http.proxyHost</code> and <code>http.proxyPort</code>\
      \ system properties.</p>\n\n<p>Tapes are stored to disk as <a href='http://yaml.org/'>YAML</a> files and can be modified (or even created) by hand and committed to your project&#8217;s source control repository so they can be shared by other members of\
      \ your team and used by your CI server. Different tests can use different tapes to simulate various response conditions. Each tape can hold multiple request/response interactions. An example tape file can be found <a href='https://github.com/robfletcher/betamax/blob/master/src/test/resources/betamax/tapes/smoke_spec.yaml'>here</a>.</p>\n\
      \n<h2 id='versions'>Versions</h2>\n\n<p>The current stable version of Betamax is <em>1.0</em>.</p>\n\n<p>The current development version of Betamax is <em>1.1-SNAPSHOT</em>.</p>\n\n<h2 id='installation'>Installation</h2>\n\n<p>Stable versions of Betamax\
      \ are available from the Maven central repository. Stable and development versions are available from the <a href='https://oss.sonatype.org/content/repositories/snapshots/'>Sonatype OSS Maven repository</a>. To install with your favourite build system\
      \ see below:</p>\n\n<h3 id='gradle'>Gradle</h3>\n\n<p>To use Betamax in a project using <a href='http://www.gradle.org/'>Gradle</a> add the following to your <code>build.gradle</code> file:</p>\n\n<pre><code>dependencies {\n    ...\n    testCompile &quot;com.github.robfletcher:betamax:1.0&quot;\n\
      \    ...\n}</code></pre>\n\n<h3 id='grails'>Grails</h3>\n\n<p>To use Betamax in a <a href='http://grails.org/'>Grails</a> app add the following to your <code>grails-app/conf/BuildConfig.groovy</code> file:</p>\n\n<pre><code>repositories {\n    ...\n  \
      \  mavenCentral()\n    ...\n}\ndependencies {\n    ...\n    test &quot;com.github.robfletcher:betamax:1.0&quot;\n    ...\n}</code></pre>\n\n<h3 id='maven'>Maven</h3>\n\n<p>To use Betamax in a project using <a href='http://maven.apache.org/'>Maven</a> add\
      \ the following to your <code>pom.xml</code> file:</p>\n\n<pre><code>&lt;dependencies&gt;\n  ...\n  &lt;dependency&gt;\n    &lt;scope&gt;test&lt;/scope&gt;\n    &lt;groupId&gt;com.github.robfletcher&lt;/groupId&gt;\n    &lt;artifactId&gt;betamax&lt;/artifactId&gt;\n\
      \    &lt;version&gt;1.0&lt;/version&gt;\n  &lt;/dependency&gt;\n  ...\n&lt;/dependencies&gt;</code></pre>\n\n<h2 id='usage'>Usage</h2>\n\n<p>To use Betamax you just need to annotate your JUnit test or <a href='http://spockframework.org/'>Spock</a> specifications\
      \ with <code>@Betamax(tape=&quot;tape_name&quot;)</code> and include a <code>betamax.Recorder</code> Rule.</p>\n\n<h3 id='junit'>JUnit</h3>\n\n<pre><code>import betamax.Betamax;\nimport betamax.Recorder;\nimport org.junit.*;\n\npublic class MyTest {\n\n\
      \    @Rule public Recorder recorder = new Recorder();\n\n    @Betamax(tape=&quot;my tape&quot;)\n    @Test\n    public void testMethodThatAccessesExternalWebService() {\n\n    }\n}</code></pre>\n\n<h3 id='spock'>Spock</h3>\n\n<pre><code>import betamax.Betamax\n\
      import betamax.Recorder\nimport org.junit.*\nimport spock.lang.*\n\nclass MySpec extends Specification {\n\n    @Rule Recorder recorder = new Recorder()\n\n    @Betamax(tape=&quot;my tape&quot;)\n    def &quot;feature that accesses external web service&quot;()\
      \ {\n\n    }\n}</code></pre>\n\n<h3 id='recording_and_playback'>Recording and playback</h3>\n\n<p>Betamax will record to the current tape when it intercepts any HTTP request that does not match anything that is already on the tape. If a matching recorded\
      \ interaction <em>is</em> found then the proxy does not forward the request to the target URI but instead returns the previously recorded response to the client.</p>\n\n<h3 id='matching_requests'>Matching requests</h3>\n\n<p>By default recorded interactions\
      \ are matched based on the <em>method</em> and <em>URI</em> of the request. For most scenarios this is adequate. However, you can modify the matching behaviour by specifying a <em>match</em> argument on the <code>@Betamax</code> annotation. Any combination\
      \ of instances of the <code>betamax.MatchRule</code> enum can be used. If multiple rules are used then only a recorded interaction that matches all of them will be played back. <code>MatchRule</code> options are:</p>\n\n<dl>\n<dt><code>method</code></dt>\n\
      \n<dd>the request method, <em>GET</em>, <em>POST</em>, etc.</dd>\n\n<dt><code>uri</code></dt>\n\n<dd>the full URI of the request target. This includes any query string.</dd>\n\n<dt><code>body</code></dt>\n\n<dd>the request body. This can be useful for\
      \ testing connections to RESTful services that accept <em>POST</em> data.</dd>\n\n<dt><code>host</code></dt>\n\n<dd>the host of the target URI. For example the host of <code>http://search.twitter.com/search.json</code> is <code>search.twitter.com</code>.</dd>\n\
      \n<dt><code>path</code></dt>\n\n<dd>the path of the target URI. For example the host of <code>http://search.twitter.com/search.json</code> is <code>/search.json</code>.</dd>\n\n<dt><code>port</code></dt>\n\n<dd>the port of the target URI.</dd>\n\n<dt><code>query</code></dt>\n\
      \n<dd>the query string of the target URI.</dd>\n\n<dt><code>fragment</code></dt>\n\n<dd>the fragment of the target URI. i.e. anything after a <code>#</code>.</dd>\n\n<dt><code>headers</code></dt>\n\n<dd>the request headers. If this rule is used then <em>all</em>\
      \ headers on the intercepted request must match those on the previously recorded request.</dd>\n</dl>\n\n<h3 id='tape_modes'>Tape modes</h3>\n\n<p>Betamax supports three different read/write modes for tapes. The tape mode is set by adding a <code>mode</code>\
      \ argument to the <code>@Betamax</code> annotation.</p>\n\n<dl>\n<dt><code>READ_WRITE</code></dt>\n\n<dd>This is the default mode. If the proxy intercepts a request that matches a recording on the tape then the recorded response is played back. Otherwise\
      \ the request is forwarded to the target URI and the response recorded.</dd>\n\n<dt><code>READ_ONLY</code></dt>\n\n<dd>The proxy will play back responses from tape but if it intercepts an unknown request it will not forward it to the target URI or record\
      \ anything, instead it responds with a <code>403: Forbidden</code> status code.</dd>\n\n<dt><code>WRITE_ONLY</code></dt>\n\n<dd>The proxy will always forward the request to the target URI and record the response regardless of whether or not a matching\
      \ request is already on the tape. Any existing recorded interactions will be overwritten.</dd>\n</dl>\n\n<h3 id='ignoring_certain_hosts'>Ignoring certain hosts</h3>\n\n<p>Sometimes you may need to have Betamax ignore traffic to certain hosts. A typical\
      \ example would be if you are using Betamax when end-to-end testing a web application using something like <em><a href='http://htmlunit.sourceforge.net/'>HtmlUnit</a></em> - you would not want Betamax to intercept connections to <em>localhost</em> as that\
      \ would mean traffic between <em>HtmlUnit</em> and your app was recorded and played back!</p>\n\n<p>In such a case you can simply configure the <code>ignoreHosts</code> property of the <code>betamax.Recorder</code> object. The property accepts a list of\
      \ hostnames or IP addresses. These can include wildcards at the start or end, for example <code>&quot;*.mydomain.com&quot;</code>.</p>\n\n<p>If you need to ignore connections to <em>localhost</em> you can simply set the <code>ignoreLocalhost</code> property\
      \ to <code>true</code>.</p>\n\n<h2 id='caveats'>Caveats</h2>\n\n<h3 id='security'>Security</h3>\n\n<p>Betamax is a testing tool and not a spec-compliant HTTP proxy. It ignores <em>any</em> and <em>all</em> headers that would normally be used to prevent\
      \ a proxy caching or storing HTTP traffic. You should ensure that sensitive information such as authentication credentials is removed from recorded tapes before committing them to your app&#8217;s source control repository.</p>\n\n<h3 id='using_apache_httpclient'>Using\
      \ Apache HttpClient</h3>\n\n<p>By default <a href='http://hc.apache.org/httpcomponents-client-ga/httpclient/index.html'>Apache <em>HttpClient</em></a> takes no notice of Java&#8217;s HTTP proxy settings. The Betamax proxy can only intercept traffic from\
      \ HttpClient if the client instance is set up to use a <a href='http://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/impl/conn/ProxySelectorRoutePlanner.html'><code>ProxySelectorRoutePlanner</code></a>. When Betamax is not active\
      \ this will mean HttpClient traffic will be routed via the default proxy configured in Java (if any).</p>\n\n<p>In a dependency injection context such as a <a href='http://grails.org/'>Grails</a> app you can just inject a proxy-configured <em>HttpClient</em>\
      \ instance into your class-under-test.</p>\n\n<h4 id='configuring_httpclient'>Configuring HttpClient</h4>\n\n<pre><code>DefaultHttpClient client = new DefaultHttpClient();\nHttpRoutePlanner routePlanner = new ProxySelectorRoutePlanner(\n    client.getConnectionManager().getSchemeRegistry(),\n\
      \    ProxySelector.getDefault()\n);\nclient.setRoutePlanner(routePlanner);</code></pre>\n\n<p>The same is true of <a href='http://groovy.codehaus.org/modules/http-builder/'>Groovy <em>HTTPBuilder</em></a> and its <a href='http://groovy.codehaus.org/modules/http-builder/doc/rest.html'><em>RESTClient</em></a>\
      \ variant as they are wrappers around <em>HttpClient</em>.</p>\n\n<h4 id='configuring_httpbuilder'>Configuring HTTPBuilder</h4>\n\n<pre><code>def http = new HTTPBuilder(&quot;http://groovy.codehaus.org&quot;)\nhttp.client.routePlanner = new ProxySelectorRoutePlanner(\n\
      \    http.client.connectionManager.schemeRegistry,\n    ProxySelector.default\n)</code></pre>\n\n<p><em>HTTPBuilder</em> also includes a <a href='http://groovy.codehaus.org/modules/http-builder/doc/httpurlclient.html'><em>HttpURLClient</em></a> class which\
      \ needs no special configuration as it uses a <code>java.net.URLConnection</code> rather than <em>HttpClient</em>.</p>\n\n<h2 id='configuration'>Configuration</h2>\n\n<p>The <code>Recorder</code> class has some configuration properties that you can override:</p>\n\
      \n<dl>\n<dt><code>tapeRoot</code></dt>\n\n<dd>the base directory where tape files are stored. Defaults to <code>src/test/resources/betamax/tapes</code>.</dd>\n\n<dt><code>proxyPort</code></dt>\n\n<dd>the port the Betamax proxy listens on. Defaults to <code>5555</code>.</dd>\n\
      \n<dt><code>proxyTimeout</code></dt>\n\n<dd>the number of milliseconds before the proxy will give up on a connection to the target server. A value of zero means the proxy will wait indefinitely. Defaults to <code>5000</code>.</dd>\n\n<dt><code>defaultMode</code></dt>\n\
      \n<dd>the default <em>TapeMode</em> applied to an inserted tape when the <em>mode</em> argument is not present on the <code>@Betamax</code> annotation.</dd>\n\n<dt><code>ignoreHosts</code></dt>\n\n<dd>a list of hosts that will be ignored by the Betamax\
      \ proxy. Any requests made to these hosts will proceed normally.</dd>\n\n<dt><code>ignoreLocalhost</code></dt>\n\n<dd>if set to <code>true</code> the Betamax proxy will ignore connections to local addresses. This is equivalent to setting <code>ignoreHosts</code>\
      \ to <code>[&quot;localhost&quot;, &quot;127.0.0.1&quot;, InetAddress.localHost.hostName, InetAddress.localHost.hostAddress]</code>.</dd>\n</dl>\n\n<p>If you have a file called <code>BetamaxConfig.groovy</code> or <code>betamax.properties</code> somewhere\
      \ in your classpath it will be picked up by the <code>Recorder</code> class.</p>\n\n<h3 id='example_betamaxconfiggroovy_script'>Example <em>BetamaxConfig.groovy</em> script</h3>\n\n<pre><code>betamax {\n    tapeRoot = new File(&quot;test/fixtures/tapes&quot;)\n\
      \    proxyPort = 1337\n    proxyTimeout = 30000\n    defaultMode = TapeMode.READ_ONLY\n\tignoreHosts = [&quot;localhost&quot;, &quot;127.0.0.1&quot;]\n\tignoreLocalhost = true\n}</code></pre>\n\n<h3 id='example_betamaxproperties_file'>Example <em>betamax.properties</em>\
      \ file</h3>\n\n<pre><code>betamax.tapeRoot=test/fixtures/tapes\nbetamax.proxyPort=1337\nbetamax.proxyTimeout=30000\nbetamax.defaultMode=READ_ONLY\nbetamax.ignoreHosts=localhost,127.0.0.1\nbetamax.ignoreLocalhost=true</code></pre>\n\n<h2 id='about'>About</h2>\n\
      \n<h3 id='license'>License</h3>\n\n<p><a href='http://www.apache.org/licenses/LICENSE-2.0.html'>Apache Software Licence, Version 2.0</a></p>\n\n<h3 id='authors'>Authors</h3>\n\n<p>Rob Fletcher <a href='http://github.com/robfletcher' title='Rob Fletcher\
      \ on GitHub'>github</a> <a href='http://twitter.com/rfletcherEW' title='@rfletcherEW on Twitter'>twitter</a> <a href='http://adhockery.blogspot.com/' title='Ad-Hockery'>ad-hockery</a></p>\n\n<h3 id='issues'>Issues</h3>\n\n<p>Please raise issues on Betamax&#8217;s\
      \ <a href='https://github.com/robfletcher/betamax/issues'>GitHub issue tracker</a>. Forks and pull requests are more than welcome.</p>\n\n<h3 id='download'>Download</h3>\n\n<p>You can download this project in either <a href='http://github.com/robfletcher/betamax/zipball/master'>zip</a>\
      \ or <a href='http://github.com/robfletcher/betamax/tarball/master'>tar</a> formats.</p>\n\n<p>You can also clone the project with <a href='http://git-scm.com'>Git</a> by running:</p>\n\n<pre><code>$ git clone git://github.com/robfletcher/betamax</code></pre>\n\
      \n<h3 id='dependencies'>Dependencies</h3>\n\n<p>Betamax depends on the following libraries (you will need them available on your test classpath in order to use Betamax):</p>\n\n<ul>\n<li><a href='http://groovy.codehaus.org/'>Groovy 1.7+</a></li>\n\n<li><a\
      \ href='http://hc.apache.org/httpcomponents-client-ga/httpclient/index.html'>Apache HttpClient</a></li>\n\n<li><a href='http://www.eclipse.org/jetty/'>Jetty 7</a></li>\n\n<li><a href='http://www.snakeyaml.org/'>SnakeYAML</a></li>\n\n<li><a href='http://www.junit.org/'>JUnit\
      \ 4</a></li>\n\n<li><a href='http://logging.apache.org/log4j/1.2/'>Apache log4j</a></li>\n</ul>\n\n<p>If your project gets dependencies from a <a href='http://maven.apache.org/'>Maven</a> repository these dependencies will be automatically included for\
      \ you.</p>\n\n<h3 id='acknowledgements'>Acknowledgements</h3>\n\n<p>Betamax is inspired by the <a href='http://relishapp.com/myronmarston/vcr'>VCR</a> library for Ruby written by Myron Marston. Porting VCR to Groovy was suggested to me by <a href='http://tinnedfruit.com/'>Jim\
      \ Newbery</a>.</p>\n\n<p>The documentation is built with <a href='http://jekyllrb.com/'>Jekyll</a>, <a href='http://www.getskeleton.com/'>Skeleton</a>, <a href='http://lesscss.org/'>LESS</a>, <a href='http://www.modernizr.com/'>Modernizr</a>, <a href='http://jquery.com/'>jQuery</a>\
      \ &amp; <a href='http://code.google.com/p/google-code-prettify/'>Google Code Prettify</a>. The site header font is <a href='http://www.fontsquirrel.com/fonts/play'>Play</a> by Jonas Hecksher.</p>\n\n<h2 id='examples'>Examples</h2>\n\n<p>Betamax&#8217;s\
      \ GitHub repository includes <a href='https://github.com/robfletcher/betamax/tree/master/examples/grails-betamax'>an example Grails application</a>.</p>\n\n\t\t</div>\n\n\t\t<footer>\n\t\t\t<p>&copy; Rob Fletcher 2011</p>\n\t\t</footer>\n\n\t</div>\n\n\
      \t<script src=\"http://code.jquery.com/jquery-1.6.4.min.js\"></script>\n\t<script src=\"javascripts/prettify.js\"></script>\n\t<script src=\"javascripts/betamax.js\"></script>\n\t<script src=\"javascripts/tabs.js\"></script>\n\n\t<script>\n\t\tvar _gaq\
      \ = _gaq || [];\n\t\t_gaq.push(['_setAccount', 'UA-26084649-1']);\n\t\t_gaq.push(['_trackPageview']);\n\n\t\t(function() {\n\t\t\tvar ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;\n\t\t\tga.src = ('https:' == document.location.protocol\
      \ ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';\n\t\t\tvar s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);\n\t\t})();\n\t</script>\n\t</body>\n</html>"
